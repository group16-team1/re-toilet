{"version":3,"sources":["logo.svg","store/language.ts","locales/ja_JP.ts","locales/index.ts","locales/en_US.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","createModule","Symbol","withActions","changeLanguage","language","payload","withState","useModule","LanguageActions","getLanguageState","user_lang","window","navigator","languages","console","log","reducer","on","state","locales","ja","hello","hello_name","en","App","useActions","useState","className","src","logo","alt","onClick","id","defaultMessage","values","name","unreadCount","description","my_name","href","target","rel","Boolean","location","hostname","match","ReactDOM","render","locale","messages","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,4NCImBC,YAC5DC,OAAO,aAGNC,YAAY,CACXC,eAAgB,SAACC,GAAD,MAAuB,CAACC,QAAS,CAACD,gBAEnDE,Y,mBAPWC,E,KAAWC,E,KAAiBC,E,KAkBpCC,EACHC,OAAOC,UAAUC,WAAaF,OAAOC,UAAUC,UAAU,IAC1DF,OAAOC,UAAUR,SACnBU,QAAQC,IAAI,YAAaL,GAIzBH,EACGS,QAXiC,CAClCZ,SAAU,OAWTa,GAAGT,EAAgBL,gBAAgB,SAACe,EAAD,GAClC,OADyD,EAAdd,UAEzC,IAAK,KACHc,EAAMd,SAAW,KACjB,MACF,QACEc,EAAMd,SAAW,SCnCzB,ICQee,EALY,CACzBC,GDJsB,CACtBC,MAAO,yCACPC,WAAW,qDCGXC,GCLsB,CACtBF,MAAO,8BACPC,WAAY,yBCgECE,EAzDO,WAEpBjB,IAF0B,IAKlBJ,EAAmBsB,YAAWjB,GAA9BL,eASAC,EAAaK,EAAiBiB,WAA9BtB,SAER,OACE,yBAAKuB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,6CADP,wBAGA,6BACE,4BAAQH,UAAU,SAASI,QAlBxB,WAEP5B,EADe,OAAbC,EACa,KAEA,QAeK,OAAbA,EAAoB,YAAc,kCAErC,0CAAgBA,IAElB,2BACE,kBAAC,IAAD,CACE4B,GAAG,UACHC,eAAgBd,EAAQf,GAAUiB,MAClCa,OAAQ,CAAEC,KAAM,2CAAWC,YAAa,QAG5C,2BACE,kBAAC,IAAD,CACEJ,GAAG,aACHK,YAAY,qBACZJ,eAAgBd,EAAQf,GAAUkB,WAClCY,OAAQ,CAAEI,QAAS,mBAGvB,uBACEX,UAAU,WACVY,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBC3CYC,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2D,0BCPNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAcC,OAAO,KAAKC,SAAU,IAChC,kBAAC,EAAD,QAGRC,SAASC,eAAe,SDwHtB,kBAAmBvC,WACrBA,UAAUwC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8771f26a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import {createModule} from \"typeless\";\n\n/* == Module Interface == */\n\nexport const [useModule, LanguageActions, getLanguageState] = createModule(\n  Symbol(\"language\")\n)\n  // Create Actions Creators\n  .withActions({\n    changeLanguage: (language: string) => ({payload: {language}})\n  })\n  .withState<LanguageState>();\n\nexport interface LanguageState {\n  language: \"en\" | \"ja\";\n}\n\n/* == Module Implementation == */\n\nconst initialState: LanguageState = {\n  language: \"en\"\n};\nconst user_lang =\n  (window.navigator.languages && window.navigator.languages[0]) ||\n  window.navigator.language;\nconsole.log(\"user_lang\", user_lang);\n\n// Create a reducer\n// Under the hood it uses `immer` and state mutations are allowed\nuseModule\n  .reducer(initialState)\n  .on(LanguageActions.changeLanguage, (state, {language}) => {\n    switch (language) {\n      case \"ja\":\n        state.language = \"ja\";\n        break;\n      default:\n        state.language = \"en\";\n        break;\n    }\n  });\n","import {Language} from \"./type\";\n\nconst ja_JP: Language = {\n  hello: \"{name}は残り{unreadCount}!\",\n  hello_name: `こんにちは，{ my_name } !`\n};\nexport default ja_JP;\n","import {Languages} from \"./type\";\n\nimport ja_JP from \"./ja_JP\";\nimport en_US from \"./en_US\";\n\nconst locales: Languages = {\n  ja: ja_JP,\n  en: en_US\n};\n\nexport default locales;\n","import {Language} from \"./type\";\n\nconst en_US: Language = {\n  hello: \"{name} ooooo {unreadCount}!\",\n  hello_name: \"Hello, { my_name } !\"\n};\nexport default en_US;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { useActions } from 'typeless';\nimport { useModule, LanguageActions, getLanguageState } from './store/language'\n\nimport locales from './locales/index'\n\nconst App: React.FC = () => {\n  // load epic and reducer\n  useModule();\n\n  // wrap actions with `dispatch`\n  const { changeLanguage } = useActions(LanguageActions);\n  const ff = () => {\n    if (language === 'ja') {\n      changeLanguage('en')\n    } else {\n      changeLanguage('ja')\n    }\n  }\n  // get state from store\n  const { language } = getLanguageState.useState();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <div>\n          <button className=\"button\" onClick={ff}>\n            {language === 'en' ? 'change Ja' : '英語にする'}\n          </button>\n          <div>language: {language}</div>\n        </div>\n        <p>\n          <FormattedMessage\n            id=\"welcome\"\n            defaultMessage={locales[language].hello}\n            values={{ name: <b>かす</b>, unreadCount: 134 }}\n          />\n        </p>\n        <p>\n          <FormattedMessage\n            id='hello_name'\n            description='say hello to wang.'\n            defaultMessage={locales[language].hello_name}\n            values={{ my_name: 'かす' }}\n          />\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { IntlProvider } from 'react-intl'\nimport { DefaultTypelessProvider } from 'typeless';\n\nimport 'bulma/css/bulma.css'\n\nReactDOM.render(\n    <DefaultTypelessProvider>\n        <IntlProvider locale='en' messages={{}}>\n            <App />\n        </IntlProvider>\n    </DefaultTypelessProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}