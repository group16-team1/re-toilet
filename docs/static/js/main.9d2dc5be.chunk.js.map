{"version":3,"sources":["logo.svg","language.svg","store/language.ts","locales/ja_JP.ts","locales/index.ts","locales/en_US.ts","components/LocaleBtn.tsx","components/Navbar.tsx","components/Footer.tsx","components/HeroList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","createModule","Symbol","withActions","changeLanguage","language","payload","withState","useModule","LanguageActions","getLanguageState","user_lang","window","navigator","languages","console","log","reducer","on","state","locales","ja","hello","hello_name","en","locale_list","locale","LocaleBtn","useState","useActions","ff","className","style","position","right","bottom","aria-haspopup","aria-controls","src","language_icon","alt","id","role","map","item","onClick","key","Navbar","aria-label","href","Footer","title","HeroList","logo","App","defaultMessage","values","name","unreadCount","description","my_name","target","rel","Boolean","location","hostname","match","ReactDOM","render","messages","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d2dc5be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","module.exports = __webpack_public_path__ + \"static/media/language.f6a6d1b6.svg\";","import {createModule} from \"typeless\";\n\n/* == Module Interface == */\n\nexport const [useModule, LanguageActions, getLanguageState] = createModule(\n  Symbol(\"language\")\n)\n  // Create Actions Creators\n  .withActions({\n    changeLanguage: (language: string) => ({payload: {language}})\n  })\n  .withState<LanguageState>();\n\nexport interface LanguageState {\n  language: \"en\" | \"ja\";\n}\n\n/* == Module Implementation == */\n\nconst initialState: LanguageState = {\n  language: \"en\"\n};\nconst user_lang =\n  (window.navigator.languages && window.navigator.languages[0]) ||\n  window.navigator.language;\nconsole.log(\"user_lang\", user_lang);\n\n// Create a reducer\n// Under the hood it uses `immer` and state mutations are allowed\nuseModule\n  .reducer(initialState)\n  .on(LanguageActions.changeLanguage, (state, {language}) => {\n    switch (language) {\n      case \"ja\":\n        state.language = \"ja\";\n        break;\n      default:\n        state.language = \"en\";\n        break;\n    }\n  });\n","import {Language} from \"./type\";\n\nconst ja_JP: Language = {\n  hello: \"{name}は残り{unreadCount}!\",\n  hello_name: `こんにちは，{ my_name } !`\n};\nexport default ja_JP;\n","import {Languages, Locale} from \"./type\";\n\nimport ja_JP from \"./ja_JP\";\nimport en_US from \"./en_US\";\n\nexport const locales: Languages = {\n  ja: ja_JP,\n  en: en_US\n};\n\nexport const locale_list: Locale[] = [\n  {\n    locale: \"en\",\n    language: \"English\"\n  },\n  {\n    locale: \"ja\",\n    language: \"日本語\"\n  }\n];\n","import {Language} from \"./type\";\n\nconst en_US: Language = {\n  hello: \"{name} ooooo {unreadCount}!\",\n  hello_name: \"Hello, { my_name } !\"\n};\nexport default en_US;\n","import React from 'react'\n\nimport { useActions } from 'typeless';\nimport { useModule, LanguageActions, getLanguageState } from '../store/language'\n\nimport { locale_list } from '../locales/index'\nimport language_icon from '../language.svg'\n\n\nconst LocaleBtn: React.FC = () => {\n    // load epic and reducer\n    useModule();\n\n    // get state from store\n    const { language } = getLanguageState.useState();\n\n    // wrap actions with `dispatch`\n    const { changeLanguage } = useActions(LanguageActions);\n\n    const ff = () => {\n        if (language === 'ja') {\n            changeLanguage('en')\n        } else {\n            changeLanguage('ja')\n        }\n    }\n\n    return (\n        <div className=\"dropdown is-hoverable is-right is-up\" style={{ position: 'fixed', right: '50px', bottom: '50px' }}>\n            <div className=\"dropdown-trigger\">\n                <button className=\"button\" aria-haspopup=\"true\" aria-controls=\"dropdown-menu4\">\n                    <span>{language}</span>\n                    <span className=\"icon is-small\">\n                        <img src={language_icon} className=\"App-logo\" alt=\"logo\" />\n                    </span>\n                </button>\n            </div>\n            <div className=\"dropdown-menu\" id=\"dropdown-menu4\" role=\"menu\">\n                <div className=\"dropdown-content\">\n                    {locale_list.map((item) => {\n                        return <a onClick={ff} key={item.locale} className={item.locale === language ? 'dropdown-item is-active' : 'dropdown-item'}>{item.language}</a>;\n                    })}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default LocaleBtn","import React from 'react'\n\nconst Navbar: React.FC = () => {\n  return (\n    <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n      <div className=\"navbar-brand\">\n        <a className=\"navbar-item\" href=\"https://bulma.io\">\n          <p className=\"title\">re:toire</p>\n        </a>\n      </div>\n    </nav>\n  )\n}\n\nexport default Navbar","import React from 'react'\n\nconst Footer: React.FC = () => {\n  return (\n    <footer className=\"footer\">\n      <div className=\"content has-text-centered\">\n        <p>\n          <strong>Bulma</strong> by <a href=\"https://jgthms.com\">Jeremy Thomas</a>. The source code is licensed\n          <a href=\"http://opensource.org/licenses/mit-license.php\">MIT</a>. The website content\n          is licensed <a href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">CC BY NC SA 4.0</a>.\n          <p>Icons made by <a href=\"https://www.flaticon.com/authors/srip\" title=\"srip\">srip</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></p>\n        </p>\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer ","import React from 'react'\nimport logo from '../logo.svg';\n\nconst HeroList: React.FC = () => {\n  return (\n    <div className=\"columns is-tablet\">\n      <div className=\"column\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </div>\n      <div className=\"column\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </div>\n      <div className=\"column\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </div>\n    </div>\n  )\n}\n\nexport default HeroList","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { useActions } from 'typeless';\nimport { useModule, LanguageActions, getLanguageState } from './store/language'\n\nimport { locales, locale_list } from './locales/index'\n\nimport LocaleBtn from './components/LocaleBtn'\nimport Navbar from './components/Navbar'\nimport Footer from './components/Footer'\nimport HeroList from './components/HeroList'\n\nconst App: React.FC = () => {\n  // load epic and reducer\n  useModule();\n\n  // get state from store\n  const { language } = getLanguageState.useState();\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <header className=\"App-header\">\n        <HeroList />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <p>\n          <FormattedMessage\n            id=\"welcome\"\n            defaultMessage={locales[language].hello}\n            values={{ name: <b>かす</b>, unreadCount: 134 }}\n          />\n        </p>\n        <p>\n          <FormattedMessage\n            id='hello_name'\n            description='say hello to wang.'\n            defaultMessage={locales[language].hello_name}\n            values={{ my_name: 'かす' }}\n          />\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <Footer />\n      <LocaleBtn />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { IntlProvider } from 'react-intl'\nimport { DefaultTypelessProvider } from 'typeless';\n\nimport 'bulma/css/bulma.css'\n\nReactDOM.render(\n    <DefaultTypelessProvider>\n        <IntlProvider locale='en' messages={{}}>\n            <App />\n        </IntlProvider>\n    </DefaultTypelessProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}